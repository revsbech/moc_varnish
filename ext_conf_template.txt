# cat=basic/enable; type=boolean; label=Send PURGE request when TYPO3 clears cache.
enableClearVarnishCache = 1

# cat=basic/enable; type=boolean; label=Write special cookie when logged in: If set (default is no), TYPO3 will write a special cookie that your varnish VCL configuration can use to disable cache for logged in users.
writeUserLoginCookie=0

# cat=basic/enable; type=boolean; label=Disable set-cookie when not needed: If set (default, false), TYPO3 do not send a Set-Cookie if the generated session-id is not used for anything. It is only sent if a user is authenticating or if the setKey() method is called to store anonymous session data. After the session fixation fix for TYPO3, a new session id is generated every time if it is not used for anything, this however implies that we can not cache the output in varnish. This configuration will only affect TYPO3 versions lower then 6.2.
disableSetCookieWhenNotNeeded = 0

# cat=basic/; type=string; label=List of Varnish hosts: A list (comma separated) of varnish hosts to clear for. If left empty, it is assumed that the domain to clear for is pointing to the Varnish server (as seen from the web server). Sometimes, it is required to point to another IP or address, og even multiple Varnish hosts. Ex: If set to varnishserver01.example.com,varnishserver02.example.com both varnish hosts will be sent a PURGE request, but the Host-header will still contain the domain to clear for. This setting replaces the old overrideVarnishPort setting. If you run Varnish on another port, set this setting to SERVER:PORT
varnishHosts =

# cat=Domain/; type=string; label=Override domain: Normally the purge mechanism will return one URL for all domain-records found. With this option, you can override the domains. Specify domains comma separated, and only URLs for these domains will be cleared. This is also usefull when runing with dedicated Varnish hosts, where banning is not done per domain, and you do not want TYPO3 to send a BAN/PURGE request per configured domain.
override_domains =

# cat=basic/enable; type=boolean; Label=Asynchronous handling of purges: Enable this to have purge requests handled asynchronously. This will add a little bit of delay (depending on your message queue), but will speed up the backend since the actual purge requests will be delegated to another process. This requires moc_message_queue to be installed and working.
enable_async_purge = 0