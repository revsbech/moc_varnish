# cat=basic/enable; type=boolean; label=Send PURGE request when TYPO3 clears cache.
enableClearVarnishCache = 1

# cat=basic/enable; type=boolean; label=Append wildcard:Append wildcard to single page cache clearing: Enable this if you would like to append all single page cache clearing url's with .*, so all subpages of a page are cleared when clearing page cache for a single page. This requires that the Varnish VCL matches regular expressions (~). Note that the when clearing the frontpage (/) the wildcard is not appended, otherwise all cache would be cleared when clearing the frontpage.
appendWildcard = 1

# cat=basic/enable; type=boolean; label=Write special cookie when logged in: If set (default is no), TYPO3 will write a special cookie that your varnish VCL configuration can use to disable cache for logged in users.
writeUserLoginCookie=0

# cat=basic/enable; type=boolean; label=Disable set-cookie when not needed: If set (default, false), TYPO3 do not send a Set-Cookie if the generated session-id is not used for anything. It is only sent if a user is authenticating or if the setKey() method is called to store anonymous session data. After the session fixation fix for TYPO3, a new session id is generated everytime if it is not used for anything, this however implies that we can not cache the output in varnish.
disableSetCookieWhenNotNeeded = 0

# cat=basic/; type=string; label=List of Varnish hosts: A list (comma separated) of varnish hosts to clear for. If left empty, it is assumed that the domain to clear for is pointing to the Varnish server (as seen from the webserver). Sometimes, it is required to point to another IP or address, og even multiple Varnish hosts. Ex: If set to varnishserver01.example.com,varnishserver02.example.com both varnish hosts will be sent a PURGE request, but the Host-header will still contain the domain to clear for. This setting replaces the old overrideVarnishPort setting. If you run Varnish on another port, set this setting to SERVER:PORT
varnishHosts =

# cat=Domain/; type=string; label=Override domain: Normally the purge mechanism will return one URL for all domain-records found. With this option, you can override the domains. Specify domains comma separated, and only URLs for these domains will be cleared.
override_domains =

# cat=Event/; type=boolean; Label=Asynchronous handling of purge for single page uid: Enable this to have purge requests for single pages handled asynchronously. This will add a little bit of delay, but will speed up the backend since the actual purge requests will be delegated to a scheduler task. Remember to enable the scheduler task.
event.enable_async_pageuid_event = 0

# cat=Event/; type=boolean; Label=Asynchronous handling of purge for url: Enable this to have purge requests for specific URL's (including "Clear all cache") handled asynchronously. This will add a little bit of delay, but will speed up the backend since the actual purge requests will be delegated to a scheduler task. Remember to enable the scheduler task.
event.enable_async_url_event = 0

# cat=Event/; type=boolean; Label=Enable beanstalk jobqueue: If enabled, configured asynchronous purgeevents are sent via a beanstalk jobqueue. If not, events are stored locally in a table and processed via a schedulerjob. If you enable this, make sure you have beanstalk running, and make sure you start the worker daemon with the pheanstalkworker:start extbase cli command.
event.enable_beanstalk = 0

#cat=Event/; type=string; Label=Beanstalk server: The servername or IP of the beanstalk server. Is only used of the beanstalk jobqueue is enabled
event.beanstalk_server = 127.0.0.1

#cat=Event/; type=string; Label=Beanstalk tube: Specify which tube to use for events. Is only used of the beanstalk jobqueue is enabled
event.beanstalk_tube = purgeevent